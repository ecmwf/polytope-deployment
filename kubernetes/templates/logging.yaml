# Sets up the EFK stack
# - Elasticsearch
# - Fluentd
# - Kibana

---

{{ if .Values.deployment.efk_logstack }}

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: elasticsearch
  namespace: {{ .Values.deployment.namespace }}
spec:
  serviceName: elasticsearch
  replicas: 3
  selector:
    matchLabels:
      app: elasticsearch
  template:
    metadata:
      labels:
        app: elasticsearch
    spec:
      containers:
      - name: elasticsearch
        image: docker.elastic.co/elasticsearch/elasticsearch-oss:7.3.0
        ports:
        - containerPort: 9200
          name: rest
          protocol: TCP
        - containerPort: 9300
          name: inter-node
          protocol: TCP
        volumeMounts:
        - name: data
          mountPath: /usr/share/elasticsearch/data
        env:
          - name: cluster.name
            value: k8s-logs
          - name: node.name
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: discovery.seed_hosts
            value: "elasticsearch-0.elasticsearch,elasticsearch-1.elasticsearch,elasticsearch-2.elasticsearch"
          - name: cluster.initial_master_nodes
            value: "elasticsearch-0,elasticsearch-1,elasticsearch-2"
          - name: ES_JAVA_OPTS
            value: "-Xms512m -Xmx512m"
      initContainers:
      - name: fix-permissions
        image: busybox
        command: ["sh", "-c", "chown -R 1000:1000 /usr/share/elasticsearch/data"]
        securityContext:
          privileged: true
        volumeMounts:
        - name: data
          mountPath: /usr/share/elasticsearch/data
      - name: increase-vm-max-map
        image: busybox
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        securityContext:
          privileged: true
      - name: increase-fd-ulimit
        image: busybox
        command: ["sh", "-c", "ulimit -n 65536"]
        securityContext:
          privileged: true
  volumeClaimTemplates:
  - metadata:
      name: data
      labels:
        app: elasticsearch
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi

---

kind: Service
apiVersion: v1
metadata:
  name: elasticsearch
  namespace: {{ .Values.deployment.namespace }}
  labels:
    app: elasticsearch
spec:
  selector:
    app: elasticsearch
  clusterIP: None
  ports:
    - port: 9200
      name: rest
    - port: 9300
      name: inter-node

---

# apiVersion: v1
# kind: ServiceAccount
# metadata:
#   name: fluentd

# ---

# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRole
# metadata:
#   name: fluentd
# rules:
# - apiGroups:
#   - ""
#   resources:
#   - pods
#   - namespaces
#   verbs:
#   - get
#   - list
#   - watch

# ---

# kind: ClusterRoleBinding
# apiVersion: rbac.authorization.k8s.io/v1
# metadata:
#   name: fluentd
# roleRef:
#   kind: ClusterRole
#   name: fluentd
#   apiGroup: rbac.authorization.k8s.io
# subjects:
# - kind: ServiceAccount
#   name: fluentd
#   namespace: default

# ---

# kind: ConfigMap
# apiVersion: v1
# metadata:
#   name: fluentd-configmap
# data:
#   fluent.conf: |-
#     <match fluent.**>
#       @type null
#     </match>

#     <source>
#       @id fluentd-containers.log
#       @type tail
#       path /var/log/containers/*.log
#       pos_file /var/log/kube-containers.log.pos
#       tag kubernetes.*
#       read_from_head true
#       reserve_data true
#       key_name log
#       <parse>
#         @type multi_format
#         <pattern>
#           format json
#           time_key time
#           time_format %Y-%m-%dT%H:%M:%S.%NZ
#         </pattern>
#         <pattern>
#           format /^(?<time>.+) (?<stream>stdout|stderr) [^ ]* (?<log>.*)$/
#           time_format %Y-%m-%dT%H:%M:%S.%N%:z
#         </pattern>
#         <pattern>
#           format none
#         </pattern>
#       </parse>
#     </source>

#     <filter kubernetes.**>
#       @id filter_parser
#       @type parser
#       key_name log
#       reserve_data true
#       replace_invalid_sequence true
#       emit_invalid_record_to_error true
#       <parse>
#         @type multi_format
#         <pattern>
#           format json
#         </pattern>
#         <pattern>
#           format none
#         </pattern>
#       </parse>
#     </filter>

#     <filter kubernetes.**>
#       @type kubernetes_metadata
#       @id filter_kube_metadata
#     </filter>
#     <match **>
#       @type elasticsearch
#       @id out_es
#       @log_level info
#       include_tag_key true
#       host "#{ENV['FLUENT_ELASTICSEARCH_HOST']}"
#       port "#{ENV['FLUENT_ELASTICSEARCH_PORT']}"
#       path "#{ENV['FLUENT_ELASTICSEARCH_PATH']}"
#       scheme "#{ENV['FLUENT_ELASTICSEARCH_SCHEME'] || 'http'}"
#       ssl_verify "#{ENV['FLUENT_ELASTICSEARCH_SSL_VERIFY'] || 'true'}"
#       ssl_version "#{ENV['FLUENT_ELASTICSEARCH_SSL_VERSION'] || 'TLSv1'}"
#       user "#{ENV['FLUENT_ELASTICSEARCH_USER']}"
#       password "#{ENV['FLUENT_ELASTICSEARCH_PASSWORD']}"
#       reload_connections "#{ENV['FLUENT_ELASTICSEARCH_RELOAD_CONNECTIONS'] || 'false'}"
#       reconnect_on_error "#{ENV['FLUENT_ELASTICSEARCH_RECONNECT_ON_ERROR'] || 'true'}"
#       reload_on_failure "#{ENV['FLUENT_ELASTICSEARCH_RELOAD_ON_FAILURE'] || 'true'}"
#       log_es_400_reason "#{ENV['FLUENT_ELASTICSEARCH_LOG_ES_400_REASON'] || 'false'}"
#       logstash_prefix "#{ENV['FLUENT_ELASTICSEARCH_LOGSTASH_PREFIX'] || 'logstash'}"
#       logstash_format "#{ENV['FLUENT_ELASTICSEARCH_LOGSTASH_FORMAT'] || 'true'}"
#       index_name "#{ENV['FLUENT_ELASTICSEARCH_LOGSTASH_INDEX_NAME'] || 'logstash'}"
#       type_name "#{ENV['FLUENT_ELASTICSEARCH_LOGSTASH_TYPE_NAME'] || 'fluentd'}"
#       <buffer>
#         flush_thread_count "#{ENV['FLUENT_ELASTICSEARCH_BUFFER_FLUSH_THREAD_COUNT'] || '8'}"
#         flush_interval "#{ENV['FLUENT_ELASTICSEARCH_BUFFER_FLUSH_INTERVAL'] || '5s'}"
#         chunk_limit_size "#{ENV['FLUENT_ELASTICSEARCH_BUFFER_CHUNK_LIMIT_SIZE'] || '2M'}"
#         queue_limit_length "#{ENV['FLUENT_ELASTICSEARCH_BUFFER_QUEUE_LIMIT_LENGTH'] || '32'}"
#         retry_max_interval "#{ENV['FLUENT_ELASTICSEARCH_BUFFER_RETRY_MAX_INTERVAL'] || '30'}"
#         retry_forever true
#       </buffer>
#     </match>

# ---

# apiVersion: apps/v1
# kind: DaemonSet
# metadata:
#   name: fluentd
#   labels:
#     app: fluentd
# spec:
#   selector:
#     matchLabels:
#       app: fluentd
#   template:
#     metadata:
#       labels:
#         app: fluentd
#     spec:
#       serviceAccount: fluentd
#       serviceAccountName: fluentd
#       tolerations:
#       - key: node-role.kubernetes.io/master
#         effect: NoSchedule
#       containers:
#       - name: fluentd
#         image: fluent/fluentd-kubernetes-daemonset:v1.4-debian-elasticsearch-1
#         env:
#           - name:  FLUENT_ELASTICSEARCH_HOST
#             value: "elasticsearch"
#           - name:  FLUENT_ELASTICSEARCH_PORT
#             value: "9200"
#           - name: FLUENT_ELASTICSEARCH_SCHEME
#             value: "http"
#           - name: FLUENT_UID
#             value: "0"
#           - name: FLUENT_ELASTICSEARCH_SED_DISABLE
#             value: "true"
#           - name: FLUENT_ELASTICSEARCH_LOG_ES_400_REASON
#             value: "true"
#         resources:
#           limits:
#             memory: 200Mi
#           requests:
#             cpu: 100m
#             memory: 200Mi
#         volumeMounts:
#         - name: varlog
#           mountPath: /var/log
#         - mountPath: {{ .Values.deployment.log_path | default "/var/lib/docker/containers" }}
#           name: varlibdockercontainers
#           readOnly: true
#         - name: config
#           mountPath: /fluentd/etc/
      
#       terminationGracePeriodSeconds: 30
#       volumes:
#       - name: config
#         configMap:
#           name: fluentd-configmap
#       - name: varlog
#         hostPath:
#           path: /var/log
#       - name: varlibdockercontainers
#         hostPath:
#           path: {{ .Values.deployment.log_path | default "/var/lib/docker/containers" }}



---

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: kibana
  name: kibana
  namespace: {{ .Values.deployment.namespace }}
spec:
  selector:
    matchLabels:
      app: kibana
  template:
    metadata:
      labels:
        app: kibana
        dashboad: kibana
    spec:
      containers:
      - env:
        - name: ELASTICSEARCH_URL
          value: http://elasticsearch:9200/
        - name: SERVER_BASEPATH
          value: /kibana
        - name: SERVER_REWRITEBASEPATH
          value: "true"
        image: docker.elastic.co/kibana/kibana-oss:7.3.0
        name: kibana
        resources: {}

---

apiVersion: v1
kind: Service
metadata:
  labels:
    app: kibana
  name: kibana-svc
  namespace: {{ .Values.deployment.namespace }}
spec:
  ports:
  - port: 5001
    protocol: TCP
    targetPort: 5601
  selector:
    app: kibana

# ---

# apiVersion: v1
# kind: Pod
# metadata:
#   name: counter
# spec:
#   containers:
#   - name: count
#     image: busybox
#     args: [/bin/sh, -c,
#             'i=0; while true; do echo "{\"hello\": \"world\" }"; i=$((i+1)); sleep 1; done']

{{ end }}